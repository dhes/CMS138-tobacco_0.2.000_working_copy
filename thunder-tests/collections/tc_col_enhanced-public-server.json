{
    "_id": "4d5b84d5-1c27-4345-8440-82888877cd70",
    "colName": "enhanced public server",
    "created": "2025-08-04T20:36:37.019Z",
    "sortNum": 60000,
    "folders": [
        {
            "_id": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "deploy realtime test patients",
            "containerId": "",
            "created": "2025-09-14T00:39:28.750Z",
            "sortNum": 10000
        },
        {
            "_id": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "$evaluate realtime",
            "containerId": "",
            "created": "2025-09-14T00:43:49.620Z",
            "sortNum": 20000
        }
    ],
    "requests": [
        {
            "_id": "5c343a95-4fc1-4ee8-832c-8e9de5b38062",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "",
            "name": "84be94ef-4702-4657-b9df-6b9c3aeb48ed",
            "url": "Library/Hospice",
            "method": "GET",
            "sortNum": 2500,
            "created": "2025-08-04T20:37:32.122Z",
            "modified": "2025-09-06T01:26:43.352Z",
            "headers": []
        },
        {
            "_id": "458593b0-a7d2-4a97-a7cc-710aa379aa9a",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "",
            "name": "deploy tobacco bundle",
            "url": "",
            "method": "POST",
            "sortNum": 20000,
            "created": "2025-08-04T20:39:32.725Z",
            "modified": "2025-08-04T20:40:03.788Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../bundles/measure/CMS138FHIRPreventiveTobaccoCessation/CMS138FHIRPreventiveTobaccoCessation-bundle.json"
            }
        },
        {
            "_id": "0d2ce351-0af1-41eb-9c38-20a477504dd7",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "",
            "name": "Practitioner/example",
            "url": "Library?_elements=name",
            "method": "GET",
            "sortNum": 15625,
            "created": "2025-08-04T20:56:40.426Z",
            "modified": "2025-08-23T23:16:45.656Z",
            "headers": [],
            "params": [
                {
                    "name": "_elements",
                    "value": "name",
                    "isPath": false
                }
            ]
        },
        {
            "_id": "316be7a8-1efc-435b-91d4-ba1a89728848",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "",
            "name": "Practitioner/example",
            "url": "Practitioner/example",
            "method": "PUT",
            "sortNum": 11250,
            "created": "2025-08-04T21:01:17.800Z",
            "modified": "2025-08-04T21:01:35.314Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Practitioner\",\n  \"id\": \"example\",\n  \"active\": true,\n  \"name\": [\n    {\n      \"family\": \"Example\",\n      \"given\": [\"Test\"]\n    }\n  ]\n}",
                "form": []
            }
        },
        {
            "_id": "e29cd3c8-7fa6-4d1f-8684-aaebefcd58b8",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "",
            "name": "Patient using _id",
            "url": "Patient/ed2fe491-3eb7-424a-bf95-5d44b6102cec",
            "method": "GET",
            "sortNum": 12500,
            "created": "2025-08-04T22:47:40.677Z",
            "modified": "2025-08-10T23:49:43.228Z",
            "headers": []
        },
        {
            "_id": "b4a20fbd-ca3a-4313-8ffd-0b7de83da5c0",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "",
            "name": "evaluate-measure CMS138FHIRPreventiveTobaccoCessation",
            "url": "Measure/CMS138FHIRPreventiveTobaccoCessation/$evaluate-measure?subject=ed2fe491-3eb7-424a-bf95-5d44b6102cec&periodStart=2025-01-01&periodEnd=2025-12-31",
            "method": "GET",
            "sortNum": 30000,
            "created": "2025-08-10T23:47:14.332Z",
            "modified": "2025-08-10T23:48:44.966Z",
            "headers": [],
            "params": [
                {
                    "name": "subject",
                    "value": "ed2fe491-3eb7-424a-bf95-5d44b6102cec",
                    "isPath": false
                },
                {
                    "name": "periodStart",
                    "value": "2025-01-01",
                    "isPath": false
                },
                {
                    "name": "periodEnd",
                    "value": "2025-12-31",
                    "isPath": false
                }
            ]
        },
        {
            "_id": "ae0a4d7c-54ce-4730-8b39-407564337664",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "",
            "name": "persisting CQL Runner libraries?",
            "url": "Library?name=Experiment",
            "method": "GET",
            "sortNum": 40000,
            "created": "2025-08-11T02:52:33.887Z",
            "modified": "2025-08-11T02:57:33.939Z",
            "headers": [],
            "params": [
                {
                    "name": "name",
                    "value": "Experiment",
                    "isPath": false
                }
            ]
        },
        {
            "_id": "f31fecfe-0102-495e-8471-fc1a14be02cc",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "",
            "name": "a simple patient",
            "url": "Patient/simple-test",
            "method": "PUT",
            "sortNum": 50000,
            "created": "2025-08-11T03:34:34.725Z",
            "modified": "2025-08-11T03:34:51.152Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "  {\n    \"resourceType\": \"Patient\",\n    \"id\": \"simple-test\",\n    \"name\": [{\"family\": \"Test\", \"given\": [\"Simple\"]}],\n    \"gender\": \"female\",\n    \"birthDate\": \"1990-01-01\"\n  }\n",
                "form": []
            }
        },
        {
            "_id": "d315a45a-e3db-43a5-b679-ca7899d6e2e4",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "",
            "name": "MeasureReport specific report specific patient testCaseDescription markdown value",
            "url": "MeasureReport/421fba02-24f0-4fdd-ac67-0b58b7c45d9e?_elements=extension,contained",
            "method": "GET",
            "sortNum": 60000,
            "created": "2025-08-25T02:40:56.269Z",
            "modified": "2025-08-25T03:02:01.863Z",
            "headers": [],
            "params": [
                {
                    "name": "_elements",
                    "value": "extension,contained",
                    "isPath": false
                }
            ]
        },
        {
            "_id": "f4b4b77c-a620-4576-9e13-2d2f99c8713e",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "",
            "name": "$cql TobaccoCessation",
            "url": "",
            "method": "GET",
            "sortNum": 70000,
            "created": "2025-09-02T00:37:12.282Z",
            "modified": "2025-09-02T00:37:12.282Z",
            "headers": []
        },
        {
            "_id": "f88ab791-c9f5-4286-ac73-d22388fa74bd",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "",
            "name": "Library Age",
            "url": "Library/Age",
            "method": "PUT",
            "sortNum": 80000,
            "created": "2025-09-03T03:58:16.280Z",
            "modified": "2025-09-03T03:58:50.494Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/resources/library/library-Age-0.0.1.json"
            }
        },
        {
            "_id": "de6293f4-bf18-44a3-8690-759678535be5",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "0a82b597-2959-4b36-b922-a7025a6110eb",
            "url": "",
            "method": "POST",
            "sortNum": 90000,
            "created": "2025-09-14T00:40:04.573Z",
            "modified": "2025-09-14T00:40:46.887Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-0a82b597-2959-4b36-b922-a7025a6110eb-bundle.json"
            }
        },
        {
            "_id": "971314b6-3785-4cc2-926a-c3736031a3c8",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "0a82b597-2959-4b36-b922-a7025a6110eb",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 100000,
            "created": "2025-09-14T00:45:34.459Z",
            "modified": "2025-09-14T00:57:04.759Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/0a82b597-2959-4b36-b922-a7025a6110eb\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 1,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 0,",
                            "  \"Numerator 1\": 1,",
                            "  \"Numerator 2\": 1,",
                            "  \"Numerator 3\": 1,",
                            "  \"Patient Score 1\": 1,",
                            "  \"Patient Score 2\": 1,",
                            "  \"Patient Score 3\": 1",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "e8bd76fe-109d-450c-9d36-f6bc09076d15",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "0bac99d3-5dc8-4afa-b92c-08175e6d4128",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 110000,
            "created": "2025-09-14T02:37:58.387Z",
            "modified": "2025-09-20T23:29:44.011Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/0bac99d3-5dc8-4afa-b92c-08175e6d4128\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 0,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 0,",
                            "  \"Numerator 1\": 0,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": 0,",
                            "  \"Patient Score 2\": null,",
                            "  \"Patient Score 3\": 0",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "5a218b05-1eb7-4d8e-ac46-a9c05afb94bf",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "0bac99d3-5dc8-4afa-b92c-08175e6d4128",
            "url": "",
            "method": "POST",
            "sortNum": 100000,
            "created": "2025-09-14T02:46:35.586Z",
            "modified": "2025-09-14T02:49:04.116Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-0bac99d3-5dc8-4afa-b92c-08175e6d4128-bundle.json"
            }
        },
        {
            "_id": "3874946a-41af-4eb1-9e4e-7bf406f20692",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "1e9d0316-15ee-45c6-8cf4-b1fe4dd38ee4",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 120000,
            "created": "2025-09-14T03:40:41.124Z",
            "modified": "2025-09-14T03:53:31.705Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/1e9d0316-15ee-45c6-8cf4-b1fe4dd38ee4\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 0,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 1,",
                            "  \"Numerator 1\": 0,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": null,",
                            "  \"Patient Score 2\": null,",
                            "  \"Patient Score 3\": null",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "2a749db6-96ce-4f32-92ef-5b5a8382dd2b",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "1e9d0316-15ee-45c6-8cf4-b1fe4dd38ee4",
            "url": "",
            "method": "POST",
            "sortNum": 110000,
            "created": "2025-09-14T03:44:27.300Z",
            "modified": "2025-09-14T03:45:46.171Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-1e9d0316-15ee-45c6-8cf4-b1fe4dd38ee4-bundle.json"
            }
        },
        {
            "_id": "7cb16931-72bc-434d-b692-5386c83e15b3",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "2c67319a-21bb-46a9-8eb5-032c55ef22a6",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 130000,
            "created": "2025-09-14T04:14:05.229Z",
            "modified": "2025-09-16T02:21:50.583Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/2c67319a-21bb-46a9-8eb5-032c55ef22a6\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 0,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 1,",
                            "  \"Numerator 1\": 0,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": null,",
                            "  \"Patient Score 2\": null,",
                            "  \"Patient Score 3\": null",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "6536d65c-9d2f-4e9f-a640-41bc89a60f27",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "1fd5d757-33e9-4571-bb7c-d811f337147e",
            "url": "",
            "method": "POST",
            "sortNum": 120000,
            "created": "2025-09-14T04:14:23.603Z",
            "modified": "2025-09-14T04:15:05.350Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-1fd5d757-33e9-4571-bb7c-d811f337147e-bundle.json"
            }
        },
        {
            "_id": "46142403-b900-4fb1-834c-42c434eb4dff",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "2c67319a-21bb-46a9-8eb5-032c55ef22a6",
            "url": "",
            "method": "POST",
            "sortNum": 130000,
            "created": "2025-09-16T02:11:50.117Z",
            "modified": "2025-09-16T02:13:31.473Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-2c67319a-21bb-46a9-8eb5-032c55ef22a6-bundle.json"
            }
        },
        {
            "_id": "e78f11b6-09ab-41c4-bd29-03319e1373d9",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "2f6433a6-e4bc-4325-854a-0b405c2b3bcb",
            "url": "",
            "method": "POST",
            "sortNum": 140000,
            "created": "2025-09-16T02:22:16.378Z",
            "modified": "2025-09-16T02:23:23.457Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-2f6433a6-e4bc-4325-854a-0b405c2b3bcb-bundle.json"
            }
        },
        {
            "_id": "e3abe6a5-2c60-4ce2-9a7c-520dc8af308c",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "2f6433a6-e4bc-4325-854a-0b405c2b3bcb",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 140000,
            "created": "2025-09-16T02:22:33.015Z",
            "modified": "2025-09-16T02:30:00.696Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/2f6433a6-e4bc-4325-854a-0b405c2b3bcb\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 1,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 1,",
                            "  \"Numerator 1\": 1,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": null,",
                            "  \"Patient Score 2\": null,",
                            "  \"Patient Score 3\": null",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "1ab9cafc-faac-46d1-a808-88efcea9d237",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "3b852a23-cad5-44f0-a378-a67fbd615d39",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 150000,
            "created": "2025-09-16T02:30:23.552Z",
            "modified": "2025-09-16T02:34:31.250Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/3b852a23-cad5-44f0-a378-a67fbd615d39\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 1,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 0,",
                            "  \"Numerator 1\": 1,",
                            "  \"Numerator 2\": 1,",
                            "  \"Numerator 3\": 1,",
                            "  \"Patient Score 1\": 1,",
                            "  \"Patient Score 2\": 1,",
                            "  \"Patient Score 3\": 1",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "b094f517-1b64-48b6-b633-d57c898f50f7",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "3b852a23-cad5-44f0-a378-a67fbd615d39",
            "url": "",
            "method": "POST",
            "sortNum": 150000,
            "created": "2025-09-16T02:30:27.497Z",
            "modified": "2025-09-16T02:31:02.453Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-3b852a23-cad5-44f0-a378-a67fbd615d39-bundle.json"
            }
        },
        {
            "_id": "b9af8959-d7be-4f11-8cc4-0b59dabbe36a",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "3d7f4315-9b6d-4524-aeac-611a0faa50c1",
            "url": "",
            "method": "POST",
            "sortNum": 160000,
            "created": "2025-09-16T19:23:45.426Z",
            "modified": "2025-09-16T19:25:28.406Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-3d7f4315-9b6d-4524-aeac-611a0faa50c1-bundle.json"
            }
        },
        {
            "_id": "888784d4-21e4-45fd-8d14-8c3d0ef0beab",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "3d7f4315-9b6d-4524-aeac-611a0faa50c1",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 160000,
            "created": "2025-09-16T19:25:36.277Z",
            "modified": "2025-09-16T19:31:35.326Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/3d7f4315-9b6d-4524-aeac-611a0faa50c1\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 0,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 0,",
                            "  \"Numerator 1\": 0,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": 0,",
                            "  \"Patient Score 2\": null,",
                            "  \"Patient Score 3\": 0",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "2e08b0ed-1a8d-4753-8b95-b73c684c9292",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "3db6bc73-54a7-4bcd-8547-41476890110a",
            "url": "",
            "method": "POST",
            "sortNum": 170000,
            "created": "2025-09-16T19:36:42.006Z",
            "modified": "2025-09-16T19:37:30.997Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-3db6bc73-54a7-4bcd-8547-41476890110a-bundle.json"
            }
        },
        {
            "_id": "1864ebb6-d842-4ce4-8c0c-211d531026d0",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "3db6bc73-54a7-4bcd-8547-41476890110a",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 170000,
            "created": "2025-09-16T19:37:05.425Z",
            "modified": "2025-09-16T19:43:07.851Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/3db6bc73-54a7-4bcd-8547-41476890110a\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 1,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 0,",
                            "  \"Numerator 1\": 1,",
                            "  \"Numerator 2\": 1,",
                            "  \"Numerator 3\": 1,",
                            "  \"Patient Score 1\": 1,",
                            "  \"Patient Score 2\": 1,",
                            "  \"Patient Score 3\": 1",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "b7932dca-e9e7-4448-89ea-c089caf60f3f",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "7c1ec3eb-7e2a-4419-900d-a6c74df745f1",
            "url": "",
            "method": "POST",
            "sortNum": 180000,
            "created": "2025-09-16T19:46:29.220Z",
            "modified": "2025-09-16T19:47:03.856Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-7c1ec3eb-7e2a-4419-900d-a6c74df745f1-bundle.json"
            }
        },
        {
            "_id": "90d70a65-da92-4927-8baa-213f97bfde8f",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "7c1ec3eb-7e2a-4419-900d-a6c74df745f1",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 180000,
            "created": "2025-09-16T19:46:36.018Z",
            "modified": "2025-09-16T19:47:21.275Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/7c1ec3eb-7e2a-4419-900d-a6c74df745f1\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 1,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 0,",
                            "  \"Numerator 1\": 1,",
                            "  \"Numerator 2\": 1,",
                            "  \"Numerator 3\": 1,",
                            "  \"Patient Score 1\": 1,",
                            "  \"Patient Score 2\": 1,",
                            "  \"Patient Score 3\": 1",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "dba80d9f-8a29-47cb-b69e-5fbd26c18d8a",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "15e3104f-d627-43b1-8c37-4b71545ec3d0",
            "url": "",
            "method": "POST",
            "sortNum": 190000,
            "created": "2025-09-16T19:52:49.739Z",
            "modified": "2025-09-16T19:53:58.189Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-15e3104f-d627-43b1-8c37-4b71545ec3d0-bundle.json"
            }
        },
        {
            "_id": "29855be3-9d4f-42d3-9c39-e02622dddfcc",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "15e3104f-d627-43b1-8c37-4b71545ec3d0",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 190000,
            "created": "2025-09-16T19:52:52.896Z",
            "modified": "2025-09-19T01:46:58.200Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/15e3104f-d627-43b1-8c37-4b71545ec3d0\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 1,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 1,",
                            "  \"Numerator 1\": 1,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": null,",
                            "  \"Patient Score 2\": null,",
                            "  \"Patient Score 3\": null",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "44d44030-2a68-42fb-a526-33127b7a6220",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "48a82409-6045-44df-992b-a64e0d16e16e",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 200000,
            "created": "2025-09-16T20:13:18.023Z",
            "modified": "2025-09-16T20:18:01.334Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/48a82409-6045-44df-992b-a64e0d16e16e\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 0,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 1,",
                            "  \"Numerator 1\": 0,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": null,",
                            "  \"Patient Score 2\": null,",
                            "  \"Patient Score 3\": null",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "5b0f6b83-69a8-403e-b47e-d5e022939975",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "48a82409-6045-44df-992b-a64e0d16e16e",
            "url": "",
            "method": "POST",
            "sortNum": 200000,
            "created": "2025-09-16T20:13:24.687Z",
            "modified": "2025-09-16T20:14:18.745Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-48a82409-6045-44df-992b-a64e0d16e16e-bundle.json"
            }
        },
        {
            "_id": "f396eb18-db17-4d60-b6a4-125dc1e8dbc7",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "83ec954c-2bfe-4254-bcc1-a7346def56c7",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 210000,
            "created": "2025-09-16T20:20:45.169Z",
            "modified": "2025-09-16T20:23:40.070Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/83ec954c-2bfe-4254-bcc1-a7346def56c7\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 0,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 0,",
                            "  \"Numerator 1\": 0,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": 0,",
                            "  \"Patient Score 2\": null,",
                            "  \"Patient Score 3\": 0",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "e875706f-bf77-4152-83a5-bd9a64083661",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "83ec954c-2bfe-4254-bcc1-a7346def56c7",
            "url": "",
            "method": "POST",
            "sortNum": 210000,
            "created": "2025-09-16T20:20:48.593Z",
            "modified": "2025-09-16T20:21:46.421Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-83ec954c-2bfe-4254-bcc1-a7346def56c7-bundle.json"
            }
        },
        {
            "_id": "55b141f8-5b74-42d0-840b-efa1b4e0a2b9",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "84be94ef-4702-4657-b9df-6b9c3aeb48ed",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 220000,
            "created": "2025-09-17T00:08:24.360Z",
            "modified": "2025-09-17T00:11:53.782Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/84be94ef-4702-4657-b9df-6b9c3aeb48ed\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 0,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 0,",
                            "  \"Numerator 1\": 1,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 1,",
                            "  \"Patient Score 1\": 1,",
                            "  \"Patient Score 2\": null,",
                            "  \"Patient Score 3\": 1",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "6235c55d-7aea-40e2-afeb-2b8dd04002cf",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "84be94ef-4702-4657-b9df-6b9c3aeb48ed",
            "url": "",
            "method": "POST",
            "sortNum": 220000,
            "created": "2025-09-17T00:09:02.363Z",
            "modified": "2025-09-17T00:09:26.274Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-84be94ef-4702-4657-b9df-6b9c3aeb48ed-bundle.json"
            }
        },
        {
            "_id": "f61d3f6e-84d9-45f5-8ecc-9bd9cb213650",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "90bf6886-cc84-4f25-ab8e-d31b97475e05",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 230000,
            "created": "2025-09-17T00:13:11.885Z",
            "modified": "2025-09-17T00:17:04.681Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/90bf6886-cc84-4f25-ab8e-d31b97475e05\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 0,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 1,",
                            "  \"Numerator 1\": 0,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": null,",
                            "  \"Patient Score 2\": null,",
                            "  \"Patient Score 3\": null",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "21c1b1fa-1ed4-4571-8cc4-cfc448d0eeaf",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "90bf6886-cc84-4f25-ab8e-d31b97475e05",
            "url": "",
            "method": "POST",
            "sortNum": 230000,
            "created": "2025-09-17T00:13:36.872Z",
            "modified": "2025-09-17T00:13:56.666Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-90bf6886-cc84-4f25-ab8e-d31b97475e05-bundle.json"
            }
        },
        {
            "_id": "5e47622d-cc3c-4f4b-974d-7852b97c1e16",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "99ac4b7d-89f1-4ae3-aad8-14240c007889",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 240000,
            "created": "2025-09-17T00:17:52.910Z",
            "modified": "2025-09-17T00:18:05.399Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/99ac4b7d-89f1-4ae3-aad8-14240c007889\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 0,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 1,",
                            "  \"Numerator 1\": 0,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": null,",
                            "  \"Patient Score 2\": null,",
                            "  \"Patient Score 3\": null",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "bd88877c-2e9e-4a72-a141-4ef7d4d5be69",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "99ac4b7d-89f1-4ae3-aad8-14240c007889",
            "url": "",
            "method": "POST",
            "sortNum": 240000,
            "created": "2025-09-17T00:18:11.460Z",
            "modified": "2025-09-17T00:18:30.250Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-99ac4b7d-89f1-4ae3-aad8-14240c007889-bundle.json"
            }
        },
        {
            "_id": "51faa561-dd90-49a7-92f1-cda7a382a5a3",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "188daa2f-3632-41a0-92a0-49dedb4cff61",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 250000,
            "created": "2025-09-17T00:22:03.444Z",
            "modified": "2025-09-17T00:24:49.960Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/188daa2f-3632-41a0-92a0-49dedb4cff61\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 0,",
                            "  \"Denominator 1\": 0,",
                            "  \"Denominator 2\": 0,",
                            "  \"Denominator 3\": 0,",
                            "  \"Denominator Exclusion\": 0,",
                            "  \"Numerator 1\": 0,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": null,",
                            "  \"Patient Score 2\": null,",
                            "  \"Patient Score 3\": null",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "1c949af9-272c-48ca-8c14-3a4456167790",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "188daa2f-3632-41a0-92a0-49dedb4cff61",
            "url": "",
            "method": "POST",
            "sortNum": 250000,
            "created": "2025-09-17T00:22:14.123Z",
            "modified": "2025-09-17T00:22:45.900Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-188daa2f-3632-41a0-92a0-49dedb4cff61-bundle.json"
            }
        },
        {
            "_id": "c0df62bd-6843-42ab-bc80-9a0982992254",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "636ee146-710d-48c2-8f0f-f5eaee27ac05",
            "url": "",
            "method": "POST",
            "sortNum": 260000,
            "created": "2025-09-17T00:43:06.228Z",
            "modified": "2025-09-17T00:43:43.619Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-636ee146-710d-48c2-8f0f-f5eaee27ac05-bundle.json"
            }
        },
        {
            "_id": "70fb57d8-ddfa-41b5-aa29-d213c9a397d5",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "636ee146-710d-48c2-8f0f-f5eaee27ac05",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 260000,
            "created": "2025-09-17T00:43:49.409Z",
            "modified": "2025-09-17T00:45:04.142Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/636ee146-710d-48c2-8f0f-f5eaee27ac05\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 1,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 0,",
                            "  \"Numerator 1\": 1,",
                            "  \"Numerator 2\": 1,",
                            "  \"Numerator 3\": 1,",
                            "  \"Patient Score 1\": 1,",
                            "  \"Patient Score 2\": 1,",
                            "  \"Patient Score 3\": 1",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "049afc43-f418-4190-b1a2-4cbfe4140126",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "794b8913-05f1-4eab-84e3-15e92f98828c",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 270000,
            "created": "2025-09-17T02:50:55.706Z",
            "modified": "2025-09-17T02:53:40.848Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/794b8913-05f1-4eab-84e3-15e92f98828c\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 0,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 1,",
                            "  \"Numerator 1\": 0,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": null,",
                            "  \"Patient Score 2\": null,",
                            "  \"Patient Score 3\": null",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "b50fbfa6-e34d-4ceb-b1ca-73547b2cb69e",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "794b8913-05f1-4eab-84e3-15e92f98828c",
            "url": "",
            "method": "POST",
            "sortNum": 270000,
            "created": "2025-09-17T02:51:13.285Z",
            "modified": "2025-09-17T02:51:49.726Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-794b8913-05f1-4eab-84e3-15e92f98828c-bundle.json"
            }
        },
        {
            "_id": "84202279-1745-45d1-8a6a-8bbd3e702f44",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "844ddd97-056a-4069-9dc4-ae7588dd2b4c",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 280000,
            "created": "2025-09-17T02:55:46.134Z",
            "modified": "2025-09-17T03:01:28.872Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/844ddd97-056a-4069-9dc4-ae7588dd2b4c\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 1,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 1,",
                            "  \"Numerator 1\": 1,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": null,",
                            "  \"Patient Score 2\": null,",
                            "  \"Patient Score 3\": null",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "5adcdc98-3f8b-4dc9-9e62-a563dbcf1f22",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "844ddd97-056a-4069-9dc4-ae7588dd2b4c",
            "url": "",
            "method": "POST",
            "sortNum": 280000,
            "created": "2025-09-17T02:56:10.362Z",
            "modified": "2025-09-17T02:56:27.744Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-844ddd97-056a-4069-9dc4-ae7588dd2b4c-bundle.json"
            }
        },
        {
            "_id": "5b3c30d9-7e3e-4d2c-8e97-d2806164384b",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "883d6001-49b2-4749-a66e-46883092a36e",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 290000,
            "created": "2025-09-17T03:11:02.583Z",
            "modified": "2025-09-17T03:46:27.898Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/883d6001-49b2-4749-a66e-46883092a36e\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 0,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 0,",
                            "  \"Numerator 1\": 0,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": 0,",
                            "  \"Patient Score 2\": null,",
                            "  \"Patient Score 3\": 0",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "f0325609-a63e-4df7-a0f7-f890c2b74dff",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "883d6001-49b2-4749-a66e-46883092a36e",
            "url": "",
            "method": "POST",
            "sortNum": 290000,
            "created": "2025-09-17T03:11:25.971Z",
            "modified": "2025-09-17T03:11:45.549Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-883d6001-49b2-4749-a66e-46883092a36e-bundle.json"
            }
        },
        {
            "_id": "24f64502-82d7-42a7-a949-b2e407ea9ce4",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "1546d7b8-b059-434b-b44e-438d8b19afdb",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 300000,
            "created": "2025-09-17T03:48:44.388Z",
            "modified": "2025-09-17T03:55:24.525Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/1546d7b8-b059-434b-b44e-438d8b19afdb\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 1,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 1,",
                            "  \"Numerator 1\": 1,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": null,",
                            "  \"Patient Score 2\": null,",
                            "  \"Patient Score 3\": null",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "c31553cb-027b-49dd-a4de-776c9ccb9b61",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "1546d7b8-b059-434b-b44e-438d8b19afdb",
            "url": "",
            "method": "POST",
            "sortNum": 300000,
            "created": "2025-09-17T03:49:03.697Z",
            "modified": "2025-09-17T03:49:29.791Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-1546d7b8-b059-434b-b44e-438d8b19afdb-bundle.json"
            }
        },
        {
            "_id": "cb95ff72-67ae-4eb7-b69e-47af433438ea",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "7660a26d-ae80-44c8-89a7-cdaeaf07c20c",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 310000,
            "created": "2025-09-17T04:00:26.026Z",
            "modified": "2025-09-17T04:06:34.139Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/7660a26d-ae80-44c8-89a7-cdaeaf07c20c\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 1,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 0,",
                            "  \"Numerator 1\": 1,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": 1,",
                            "  \"Patient Score 2\": 0,",
                            "  \"Patient Score 3\": 0",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "bb0a29cd-9a76-49dc-9b12-c7f05e4427a8",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "7660a26d-ae80-44c8-89a7-cdaeaf07c20c",
            "url": "",
            "method": "POST",
            "sortNum": 310000,
            "created": "2025-09-17T04:00:55.046Z",
            "modified": "2025-09-17T04:01:35.619Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-7660a26d-ae80-44c8-89a7-cdaeaf07c20c-bundle.json"
            }
        },
        {
            "_id": "a10067e5-c846-48d5-8a12-af3d3ea391c2",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "10256be8-445b-418d-804e-97d88ec93534",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 320000,
            "created": "2025-09-17T04:07:03.770Z",
            "modified": "2025-09-17T04:09:54.743Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/10256be8-445b-418d-804e-97d88ec93534\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 1,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 1,",
                            "  \"Numerator 1\": 1,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": null,",
                            "  \"Patient Score 2\": null,",
                            "  \"Patient Score 3\": null",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "1877dd09-9b02-4e26-81d5-8f308637afe3",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "10256be8-445b-418d-804e-97d88ec93534",
            "url": "",
            "method": "POST",
            "sortNum": 320000,
            "created": "2025-09-17T04:07:27.241Z",
            "modified": "2025-09-17T04:07:46.361Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-10256be8-445b-418d-804e-97d88ec93534-bundle.json"
            }
        },
        {
            "_id": "7b2fd2f6-b070-4101-b2cb-e905e8ccec27",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "27283efb-a937-4938-a6c4-42468bdeb7fd",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 330000,
            "created": "2025-09-17T04:10:34.673Z",
            "modified": "2025-09-17T04:13:42.240Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/27283efb-a937-4938-a6c4-42468bdeb7fd\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 1,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 1,",
                            "  \"Numerator 1\": 1,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": null,",
                            "  \"Patient Score 2\": null,",
                            "  \"Patient Score 3\": null",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "d9d8c888-f654-4f50-b9c7-dd68bf35ebc6",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "27283efb-a937-4938-a6c4-42468bdeb7fd",
            "url": "",
            "method": "POST",
            "sortNum": 330000,
            "created": "2025-09-17T04:11:04.546Z",
            "modified": "2025-09-17T04:11:21.674Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-27283efb-a937-4938-a6c4-42468bdeb7fd-bundle.json"
            }
        },
        {
            "_id": "2a804071-d458-48e2-9d8f-c9807b0eb7b0",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "55118a25-0e94-4cbb-bc80-0adba6fc0da0",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 340000,
            "created": "2025-09-17T04:42:09.063Z",
            "modified": "2025-09-17T04:47:17.437Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/55118a25-0e94-4cbb-bc80-0adba6fc0da0\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 0,",
                            "  \"Denominator 1\": 0,",
                            "  \"Denominator 2\": 0,",
                            "  \"Denominator 3\": 0,",
                            "  \"Denominator Exclusion\": 0,",
                            "  \"Numerator 1\": 0,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": null,",
                            "  \"Patient Score 2\": null,",
                            "  \"Patient Score 3\": null",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "01edd395-023a-4981-ad75-9b8fc9e54e48",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "55118a25-0e94-4cbb-bc80-0adba6fc0da0",
            "url": "",
            "method": "POST",
            "sortNum": 340000,
            "created": "2025-09-17T04:42:31.345Z",
            "modified": "2025-09-17T04:42:53.866Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-55118a25-0e94-4cbb-bc80-0adba6fc0da0-bundle.json"
            }
        },
        {
            "_id": "b7b4f862-7c85-4c41-b55c-fa3d4a9e92df",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "00145130-fc30-4158-a074-de6eac9f16c5",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 350000,
            "created": "2025-09-17T04:48:43.627Z",
            "modified": "2025-09-17T04:52:13.846Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/00145130-fc30-4158-a074-de6eac9f16c5\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 0,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 0,",
                            "  \"Numerator 1\": 0,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": 0,",
                            "  \"Patient Score 2\": null,",
                            "  \"Patient Score 3\": 0",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "250ec836-df99-481d-8c03-3da28638696b",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "6735075f-b4b8-41a9-8c3d-9f63737a4458",
            "url": "",
            "method": "POST",
            "sortNum": 350000,
            "created": "2025-09-17T04:49:06.333Z",
            "modified": "2025-09-17T04:53:26.751Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-6735075f-b4b8-41a9-8c3d-9f63737a4458-bundle.json"
            }
        },
        {
            "_id": "5f0b1936-0ba0-4e2c-ba16-ac297a48274a",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "6735075f-b4b8-41a9-8c3d-9f63737a4458",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 360000,
            "created": "2025-09-17T04:52:41.822Z",
            "modified": "2025-09-17T04:54:42.109Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/6735075f-b4b8-41a9-8c3d-9f63737a4458\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 1,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 0,",
                            "  \"Numerator 1\": 1,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": 1,",
                            "  \"Patient Score 2\": 0,",
                            "  \"Patient Score 3\": 0",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "9e2e648f-0737-437b-b9d6-1bdada52b089",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "6996128b-dbd1-424a-80a4-d555e02d27df",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 370000,
            "created": "2025-09-17T05:00:36.977Z",
            "modified": "2025-09-17T05:13:02.826Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/6996128b-dbd1-424a-80a4-d555e02d27df\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 0,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 0,",
                            "  \"Numerator 1\": 0,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": 0,",
                            "  \"Patient Score 2\": null,",
                            "  \"Patient Score 3\": 0",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "75792870-673f-4dff-94a9-f75e14e51d19",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "6996128b-dbd1-424a-80a4-d555e02d27df",
            "url": "",
            "method": "POST",
            "sortNum": 360000,
            "created": "2025-09-17T05:00:58.230Z",
            "modified": "2025-09-17T05:02:37.198Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-6996128b-dbd1-424a-80a4-d555e02d27df-bundle.json"
            }
        },
        {
            "_id": "34fc8330-715c-49af-977f-ff1edac64a48",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "00145130-fc30-4158-a074-de6eac9f16c5",
            "url": "",
            "method": "POST",
            "sortNum": 345000,
            "created": "2025-09-17T05:06:56.906Z",
            "modified": "2025-09-17T05:07:14.088Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-00145130-fc30-4158-a074-de6eac9f16c5-bundle.json"
            }
        },
        {
            "_id": "3f2c5473-88d5-4e81-813c-282da746b64c",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "53125065-f747-4c9b-8f4e-3cb1a0fb75fa",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 380000,
            "created": "2025-09-17T05:13:43.285Z",
            "modified": "2025-09-17T05:16:21.316Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/53125065-f747-4c9b-8f4e-3cb1a0fb75fa\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 1,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 1,",
                            "  \"Numerator 1\": 1,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": null,",
                            "  \"Patient Score 2\": null,",
                            "  \"Patient Score 3\": null",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "dd97162d-c540-4fdc-87c9-1c9da6381e2d",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "53125065-f747-4c9b-8f4e-3cb1a0fb75fa",
            "url": "",
            "method": "POST",
            "sortNum": 370000,
            "created": "2025-09-17T05:14:01.615Z",
            "modified": "2025-09-17T05:14:12.344Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-53125065-f747-4c9b-8f4e-3cb1a0fb75fa-bundle.json"
            }
        },
        {
            "_id": "af5d2ddb-7701-46b1-95ee-b2343a5dbe10",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "a09e055c-3f90-47d7-892f-9b634a426615",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 390000,
            "created": "2025-09-17T05:17:41.021Z",
            "modified": "2025-09-17T05:20:14.896Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/a09e055c-3f90-47d7-892f-9b634a426615\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 0,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 0,",
                            "  \"Numerator 1\": 0,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": 0,",
                            "  \"Patient Score 2\": null,",
                            "  \"Patient Score 3\": 0",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "6f8397cd-5b4b-4126-9069-30dff627afb4",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "a09e055c-3f90-47d7-892f-9b634a426615",
            "url": "",
            "method": "POST",
            "sortNum": 380000,
            "created": "2025-09-17T05:18:04.469Z",
            "modified": "2025-09-17T05:18:33.511Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-a09e055c-3f90-47d7-892f-9b634a426615-bundle.json"
            }
        },
        {
            "_id": "cbd265ac-d9ca-464b-bd07-255a7472c31e",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "a023252b-79c8-44ad-a545-3cfddcc706b3",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 400000,
            "created": "2025-09-17T05:20:40.744Z",
            "modified": "2025-09-17T05:23:20.515Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/a023252b-79c8-44ad-a545-3cfddcc706b3\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 0,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 0,",
                            "  \"Numerator 1\": 0,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": 0,",
                            "  \"Patient Score 2\": null,",
                            "  \"Patient Score 3\": 0",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "bf493446-e999-4dba-b1f1-10c7d0ce741c",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "a023252b-79c8-44ad-a545-3cfddcc706b3",
            "url": "",
            "method": "POST",
            "sortNum": 390000,
            "created": "2025-09-17T05:20:56.876Z",
            "modified": "2025-09-17T05:21:14.052Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-a023252b-79c8-44ad-a545-3cfddcc706b3-bundle.json"
            }
        },
        {
            "_id": "466787a4-f409-4309-b17b-3f363b501950",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "b1e9de34-9ac3-4e54-8c0e-d2c4821addf0",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 410000,
            "created": "2025-09-17T05:23:40.976Z",
            "modified": "2025-09-17T05:26:27.312Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/b1e9de34-9ac3-4e54-8c0e-d2c4821addf0\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 0,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 0,",
                            "  \"Numerator 1\": 0,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": 0,",
                            "  \"Patient Score 2\": null,",
                            "  \"Patient Score 3\": 0",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "62a652f3-3e5e-409a-8269-8a7e9d29b819",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "b1e9de34-9ac3-4e54-8c0e-d2c4821addf0",
            "url": "",
            "method": "POST",
            "sortNum": 400000,
            "created": "2025-09-17T05:23:59.909Z",
            "modified": "2025-09-17T05:24:18.248Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-b1e9de34-9ac3-4e54-8c0e-d2c4821addf0-bundle.json"
            }
        },
        {
            "_id": "ec87f351-59d6-481d-b378-1bf02acf3ea1",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "b7101730-305b-4dc8-be71-7abcc8afc0d7",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 420000,
            "created": "2025-09-17T05:26:49.301Z",
            "modified": "2025-09-17T05:34:29.762Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/b7101730-305b-4dc8-be71-7abcc8afc0d7\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 0,",
                            "  \"Denominator 1\": 0,",
                            "  \"Denominator 2\": 0,",
                            "  \"Denominator 3\": 0,",
                            "  \"Denominator Exclusion\": 0,",
                            "  \"Numerator 1\": 0,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": null,",
                            "  \"Patient Score 2\": null,",
                            "  \"Patient Score 3\": null",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "fa2f21a7-433d-4a5d-bfe4-9d5ac82230ad",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "b7101730-305b-4dc8-be71-7abcc8afc0d7",
            "url": "",
            "method": "POST",
            "sortNum": 410000,
            "created": "2025-09-17T05:27:07.052Z",
            "modified": "2025-09-17T05:27:23.182Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-b7101730-305b-4dc8-be71-7abcc8afc0d7-bundle.json"
            }
        },
        {
            "_id": "b09feb76-dd45-47ea-98b1-59dd65578bf5",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "c3cf00f5-78d9-4e58-922b-4dad4d05177a",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 430000,
            "created": "2025-09-17T05:34:59.350Z",
            "modified": "2025-09-17T05:38:14.917Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/c3cf00f5-78d9-4e58-922b-4dad4d05177a\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 1,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 0,",
                            "  \"Numerator 1\": 1,",
                            "  \"Numerator 2\": 1,",
                            "  \"Numerator 3\": 1,",
                            "  \"Patient Score 1\": 1,",
                            "  \"Patient Score 2\": 1,",
                            "  \"Patient Score 3\": 1",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "bc3d8449-7374-4d4c-a90f-452d4c064d46",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "c3cf00f5-78d9-4e58-922b-4dad4d05177a",
            "url": "",
            "method": "POST",
            "sortNum": 420000,
            "created": "2025-09-17T05:35:19.207Z",
            "modified": "2025-09-17T05:35:35.190Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-c3cf00f5-78d9-4e58-922b-4dad4d05177a-bundle.json"
            }
        },
        {
            "_id": "1e182519-547a-4b0a-9e62-d21e8538d87e",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "c150565c-0acc-44c7-addf-c93f4bf6f58a",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 440000,
            "created": "2025-09-17T05:38:43.164Z",
            "modified": "2025-09-17T05:40:44.449Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/c150565c-0acc-44c7-addf-c93f4bf6f58a\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 0,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 0,",
                            "  \"Numerator 1\": 0,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": 0,",
                            "  \"Patient Score 2\": null,",
                            "  \"Patient Score 3\": 0",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "50c5d2b5-c5b0-4b0f-ae3b-6d9ae75012d2",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "c150565c-0acc-44c7-addf-c93f4bf6f58a",
            "url": "",
            "method": "POST",
            "sortNum": 430000,
            "created": "2025-09-17T05:39:05.129Z",
            "modified": "2025-09-17T05:39:20.137Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-c150565c-0acc-44c7-addf-c93f4bf6f58a-bundle.json"
            }
        },
        {
            "_id": "380b87a3-753f-451b-b22e-0072fcbd38ae",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "cb2f20d7-a254-4e19-b5c7-ac15493ecde5",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 450000,
            "created": "2025-09-17T05:41:07.915Z",
            "modified": "2025-09-17T05:43:03.690Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/cb2f20d7-a254-4e19-b5c7-ac15493ecde5\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 1,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 0,",
                            "  \"Numerator 1\": 1,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": 1,",
                            "  \"Patient Score 2\": 0,",
                            "  \"Patient Score 3\": 0",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "6212ff91-e754-49d1-baab-85575edd1cf2",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "cb2f20d7-a254-4e19-b5c7-ac15493ecde5",
            "url": "",
            "method": "POST",
            "sortNum": 440000,
            "created": "2025-09-17T05:41:25.377Z",
            "modified": "2025-09-17T05:41:40.442Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-cb2f20d7-a254-4e19-b5c7-ac15493ecde5-bundle.json"
            }
        },
        {
            "_id": "f7daeb75-d576-4db3-b642-08ae9685e773",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "cb88eb8c-295d-4bf5-8570-f70fc3c38005",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 460000,
            "created": "2025-09-17T05:43:25.798Z",
            "modified": "2025-09-17T05:46:10.702Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/cb88eb8c-295d-4bf5-8570-f70fc3c38005\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 0,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 1,",
                            "  \"Numerator 1\": 0,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": null,",
                            "  \"Patient Score 2\": null,",
                            "  \"Patient Score 3\": null",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "7e82f569-a646-49d0-a258-96b94bd1f7ab",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "cb88eb8c-295d-4bf5-8570-f70fc3c38005",
            "url": "",
            "method": "POST",
            "sortNum": 450000,
            "created": "2025-09-17T05:43:55.078Z",
            "modified": "2025-09-17T05:44:15.310Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-cb88eb8c-295d-4bf5-8570-f70fc3c38005-bundle.json"
            }
        },
        {
            "_id": "e4dacfaa-31c0-45b2-b206-818e8f7fa1a5",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "ce4e603a-8043-4427-9823-2837adbe27af",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 470000,
            "created": "2025-09-17T05:46:52.081Z",
            "modified": "2025-09-17T05:49:23.084Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/ce4e603a-8043-4427-9823-2837adbe27af\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 0,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 0,",
                            "  \"Numerator 1\": 0,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": 0,",
                            "  \"Patient Score 2\": null,",
                            "  \"Patient Score 3\": 0",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "c52d17bf-0f9f-4321-ba5f-e6faf67e1e70",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "ce4e603a-8043-4427-9823-2837adbe27af",
            "url": "",
            "method": "POST",
            "sortNum": 460000,
            "created": "2025-09-17T05:47:16.595Z",
            "modified": "2025-09-17T05:47:32.668Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-ce4e603a-8043-4427-9823-2837adbe27af-bundle.json"
            }
        },
        {
            "_id": "10eec03b-9140-4d84-a76d-6ecc9b6d0003",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "d1ca0629-e132-40fb-ac61-b6db8ab687e0",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 480000,
            "created": "2025-09-17T05:49:48.515Z",
            "modified": "2025-09-17T05:51:55.512Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/d1ca0629-e132-40fb-ac61-b6db8ab687e0\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 0,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 0,",
                            "  \"Numerator 1\": 0,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": 0,",
                            "  \"Patient Score 2\": null,",
                            "  \"Patient Score 3\": 0",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "2903a2cb-327c-4dd8-aee2-87a1ae3f0f07",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "d1ca0629-e132-40fb-ac61-b6db8ab687e0",
            "url": "",
            "method": "POST",
            "sortNum": 470000,
            "created": "2025-09-17T05:50:15.699Z",
            "modified": "2025-09-17T05:50:34.627Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-d1ca0629-e132-40fb-ac61-b6db8ab687e0-bundle.json"
            }
        },
        {
            "_id": "12e3a7bb-33f8-4d94-93e8-43c70e5434e7",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "d441f96b-536c-415f-bde2-0155443e7260",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 490000,
            "created": "2025-09-17T05:52:13.112Z",
            "modified": "2025-09-17T05:54:00.163Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/d441f96b-536c-415f-bde2-0155443e7260\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 0,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 0,",
                            "  \"Numerator 1\": 0,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": 0,",
                            "  \"Patient Score 2\": null,",
                            "  \"Patient Score 3\": 0",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "f69326f1-0659-426d-ae37-7b31ae223716",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "d441f96b-536c-415f-bde2-0155443e7260",
            "url": "",
            "method": "POST",
            "sortNum": 480000,
            "created": "2025-09-17T05:52:34.636Z",
            "modified": "2025-09-17T05:52:50.912Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-d441f96b-536c-415f-bde2-0155443e7260-bundle.json"
            }
        },
        {
            "_id": "b23bb439-b86f-4335-b769-e3f5c486d657",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "da50ea7c-7bc0-420e-b34f-24194ada6d23",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 500000,
            "created": "2025-09-17T05:54:20.208Z",
            "modified": "2025-09-17T05:56:39.622Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/da50ea7c-7bc0-420e-b34f-24194ada6d23\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 0,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 1,",
                            "  \"Numerator 1\": 0,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": null,",
                            "  \"Patient Score 2\": null,",
                            "  \"Patient Score 3\": null",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "ff7f2499-0bbf-4c59-ad2c-80c4b1d1980a",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "da50ea7c-7bc0-420e-b34f-24194ada6d23",
            "url": "",
            "method": "POST",
            "sortNum": 490000,
            "created": "2025-09-17T05:54:36.921Z",
            "modified": "2025-09-17T05:54:58.298Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-da50ea7c-7bc0-420e-b34f-24194ada6d23-bundle.json"
            }
        },
        {
            "_id": "04d02d62-344e-4831-9efe-1605efeb02bd",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "f5f20099-9d01-41c8-8834-314387b530ad",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 510000,
            "created": "2025-09-17T05:57:06.399Z",
            "modified": "2025-09-17T05:58:59.186Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/f5f20099-9d01-41c8-8834-314387b530ad\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 1,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 0,",
                            "  \"Numerator 1\": 1,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": 1,",
                            "  \"Patient Score 2\": 0,",
                            "  \"Patient Score 3\": 0",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "feddc337-e736-464c-bebb-3045ad3b2b24",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "f5f20099-9d01-41c8-8834-314387b530ad",
            "url": "",
            "method": "POST",
            "sortNum": 500000,
            "created": "2025-09-17T05:57:32.945Z",
            "modified": "2025-09-17T05:57:48.490Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-f5f20099-9d01-41c8-8834-314387b530ad-bundle.json"
            }
        },
        {
            "_id": "ebac14fb-a05e-4f1f-b988-14c3cab44186",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "f7b53f4a-b815-4d18-9913-6184708a5b38",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 520000,
            "created": "2025-09-17T05:59:23.735Z",
            "modified": "2025-09-17T06:03:42.812Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/f7b53f4a-b815-4d18-9913-6184708a5b38\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 0,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 0,",
                            "  \"Numerator 1\": 0,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": 0,",
                            "  \"Patient Score 2\": null,",
                            "  \"Patient Score 3\": 0",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "0eb698aa-9a31-4d06-a682-d5d5f14cc01d",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "f7b53f4a-b815-4d18-9913-6184708a5b38",
            "url": "",
            "method": "POST",
            "sortNum": 510000,
            "created": "2025-09-17T05:59:40.487Z",
            "modified": "2025-09-17T05:59:55.000Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-f7b53f4a-b815-4d18-9913-6184708a5b38-bundle.json"
            }
        },
        {
            "_id": "4884817a-dc92-488f-99b2-732526cf848f",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "66af89c8-2b6a-4978-a909-4de735cf9fde",
            "name": "fa04c830-05fb-4363-af3b-2cde3cd8d26f",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 530000,
            "created": "2025-09-17T06:04:03.619Z",
            "modified": "2025-09-17T06:05:50.933Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/fa04c830-05fb-4363-af3b-2cde3cd8d26f\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00-10:00\",\n              \"end\": \"1900-12-31T23:59:00-10:00\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "  \"Initial Population\": 1,",
                            "  \"Denominator 1\": 1,",
                            "  \"Denominator 2\": 0,",
                            "  \"Denominator 3\": 1,",
                            "  \"Denominator Exclusion\": 1,",
                            "  \"Numerator 1\": 0,",
                            "  \"Numerator 2\": 0,",
                            "  \"Numerator 3\": 0,",
                            "  \"Patient Score 1\": null,",
                            "  \"Patient Score 2\": null,",
                            "  \"Patient Score 3\": null",
                            "};",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "a2724274-fb46-4ee2-ab6e-188599378f33",
            "colId": "4d5b84d5-1c27-4345-8440-82888877cd70",
            "containerId": "9ed5a0fb-e888-4259-9add-6e1c8f4f8252",
            "name": "fa04c830-05fb-4363-af3b-2cde3cd8d26f",
            "url": "",
            "method": "POST",
            "sortNum": 520000,
            "created": "2025-09-17T06:04:21.375Z",
            "modified": "2025-09-17T06:04:37.456Z",
            "headers": [],
            "body": {
                "type": "binary",
                "raw": "",
                "form": [],
                "binary": "../input/tests/measure/CMS138FHIRPreventiveTobaccoCessation/tests-fa04c830-05fb-4363-af3b-2cde3cd8d26f-bundle.json"
            }
        }
    ],
    "settings": {
        "headers": [
            {
                "name": "Content-Type",
                "value": "application/fhir+json"
            }
        ],
        "options": {
            "baseUrl": "https://enhanced.hopena.info/fhir/"
        }
    }
}