{
    "_id": "b9c7a5bf-42d4-4bfd-92da-42648cb0189b",
    "colName": "$evaluate",
    "created": "2025-09-12T02:30:32.886Z",
    "sortNum": 25000,
    "folders": [],
    "settings": {
        "headers": [
            {
                "name": "Content-Type",
                "value": "application/fhir+json"
            }
        ],
        "options": {
            "baseUrl": "{{FHIR_SERVER_URL}}"
        }
    },
    "requests": [
        {
            "_id": "eba846e9-b665-4cb7-b159-fdaad0e37ef5",
            "colId": "b9c7a5bf-42d4-4bfd-92da-42648cb0189b",
            "containerId": "",
            "name": "just-turned-12",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 60000,
            "created": "2025-09-12T02:33:14.872Z",
            "modified": "2025-09-12T03:15:37.376Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/just-turned-12\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"2025-01-01T00:00:00Z\",\n              \"end\": \"2025-12-31T23:59:59Z\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "      \"Initial Population\": 0,",
                            "      \"Denominator 1\": 0,  // Note: Fixed space in \"Denominator1 \"",
                            "      \"Denominator 2\": 0,",
                            "      \"Denominator 3\": 0,",
                            "      \"Denominator Exclusion\": 1,",
                            "      \"Numerator 1\": 0,",
                            "      \"Numerator 2\": 0,",
                            "      \"Numerator 3\": 0,",
                            "      \"Patient Score 1\": null,",
                            "      \"Patient Score 2\": null,",
                            "      \"Patient Score 3\": null",
                            "  };",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "03e73063-e4d2-4226-92c9-2c3e06f6fa17",
            "colId": "b9c7a5bf-42d4-4bfd-92da-42648cb0189b",
            "containerId": "",
            "name": "just-turned-12 realtime",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 70000,
            "created": "2025-09-12T02:36:16.296Z",
            "modified": "2025-09-12T03:16:06.817Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/just-turned-12\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00Z\",\n              \"end\": \"1900-12-31T23:59:59Z\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "      \"Initial Population\": 1,",
                            "      \"Denominator 1\": 1,  // Note: Fixed space in \"Denominator1 \"",
                            "      \"Denominator 2\": 0,",
                            "      \"Denominator 3\": 1,",
                            "      \"Denominator Exclusion\": 1,",
                            "      \"Numerator 1\": 0,",
                            "      \"Numerator 2\": 0,",
                            "      \"Numerator 3\": 0,",
                            "      \"Patient Score 1\": null,",
                            "      \"Patient Score 2\": null,",
                            "      \"Patient Score 3\": null",
                            "  };",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "4300f96a-6b27-4e84-96f9-c7c6d54a1347",
            "colId": "b9c7a5bf-42d4-4bfd-92da-42648cb0189b",
            "containerId": "",
            "name": "ce786347-3bab-4852-a1a8-c70aaa4771e3",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 80000,
            "created": "2025-09-12T03:00:12.930Z",
            "modified": "2025-09-12T03:15:09.421Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/ce786347-3bab-4852-a1a8-c70aaa4771e3\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"2025-01-01T00:00:00Z\",\n              \"end\": \"2025-12-31T23:59:59Z\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "// Test for patient existence",
                            "function patientExists() {",
                            "    let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "    // Patient exists if it has actual data (not data-absent-reason)",
                            "    return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "        ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "    );",
                            "}",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "      \"Initial Population\": 0,",
                            "      \"Denominator 1\": 0,  ",
                            "      \"Denominator 2\": 0,",
                            "      \"Denominator 3\": 0,",
                            "      \"Denominator Exclusion\": 0,",
                            "      \"Numerator 1\": 0,",
                            "      \"Numerator 2\": 0,",
                            "      \"Numerator 3\": 0,",
                            "      \"Patient Score 1\": null,",
                            "      \"Patient Score 2\": null,",
                            "      \"Patient Score 3\": null",
                            "  };",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "6ff3e5ef-8a4f-461c-a302-ae2a2e8482df",
            "colId": "b9c7a5bf-42d4-4bfd-92da-42648cb0189b",
            "containerId": "",
            "name": "ce786347-3bab-4852-a1a8-c70aaa4771e3 realtime",
            "url": "Library/CMS138FHIRPreventiveTobaccoCessation/$evaluate",
            "method": "POST",
            "sortNum": 90000,
            "created": "2025-09-12T03:01:45.123Z",
            "modified": "2025-09-12T03:16:37.269Z",
            "headers": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"subject\",\n      \"valueString\": \"Patient/ce786347-3bab-4852-a1a8-c70aaa4771e3\"\n    },\n    {\n      \"name\": \"parameters\",\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"Measurement Period\",\n            \"valuePeriod\": {\n              \"start\": \"1900-01-01T00:00:00Z\",\n              \"end\": \"1900-12-31T23:59:59Z\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}",
                "form": []
            },
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "let json = tc.response.json;",
                            "",
                            "  // Test for patient existence",
                            "  function patientExists() {",
                            "      let patientParam = json.parameter?.find(p => p.name === \"Patient\");",
                            "      // Patient exists if it has actual data (not data-absent-reason)",
                            "      return patientParam && !patientParam._valueBoolean?.extension?.some(ext =>",
                            "          ext.url === \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\"",
                            "      );",
                            "  }",
                            "",
                            "  tc.test(\"Patient exists on server\", patientExists());",
                            "",
                            "  // Helper function to get parameter value from Library/$evaluate response",
                            "  function getParamValue(paramName) {",
                            "      let param = json.parameter?.find(p => p.name === paramName);",
                            "      if (param?.valueBoolean !== undefined) return param.valueBoolean ? 1 : 0;",
                            "      if (param?.valueInteger !== undefined) return param.valueInteger;",
                            "      return null;",
                            "  }",
                            "",
                            "  // Expected values from your Parameters resource",
                            "  const expected = {",
                            "      \"Initial Population\": 1,",
                            "      \"Denominator 1\": 1,  // Note: Fixed space in \"Denominator1 \"",
                            "      \"Denominator 2\": 0,",
                            "      \"Denominator 3\": 1,",
                            "      \"Denominator Exclusion\": 1,",
                            "      \"Numerator 1\": 0,",
                            "      \"Numerator 2\": 0,",
                            "      \"Numerator 3\": 0,",
                            "      \"Patient Score 1\": null,",
                            "      \"Patient Score 2\": null,",
                            "      \"Patient Score 3\": null",
                            "  };",
                            "",
                            "  // Run tests comparing actual vs expected",
                            "  tc.test(\"Initial Population matches expected\", getParamValue(\"Initial Population\") === expected[\"Initial Population\"]);",
                            "  tc.test(\"Denominator 1 matches expected\", getParamValue(\"Denominator 1\") === expected[\"Denominator 1\"]);",
                            "  tc.test(\"Denominator 2 matches expected\", getParamValue(\"Denominator 2\") === expected[\"Denominator 2\"]);",
                            "  tc.test(\"Denominator 3 matches expected\", getParamValue(\"Denominator 3\") === expected[\"Denominator 3\"]);",
                            "  tc.test(\"Denominator Exclusion matches expected\", getParamValue(\"Denominator Exclusion\") === expected[\"Denominator Exclusion\"]);",
                            "  tc.test(\"Numerator 1 matches expected\", getParamValue(\"Numerator 1\") === expected[\"Numerator 1\"]);",
                            "  tc.test(\"Numerator 2 matches expected\", getParamValue(\"Numerator 2\") === expected[\"Numerator 2\"]);",
                            "  tc.test(\"Numerator 3 matches expected\", getParamValue(\"Numerator 3\") === expected[\"Numerator 3\"]);",
                            "  tc.test(\"Patient Score 1 matches expected\", getParamValue(\"Patient Score 1\") === expected[\"Patient Score 1\"]);",
                            "  tc.test(\"Patient Score 2 matches expected\", getParamValue(\"Patient Score 2\") === expected[\"Patient Score 2\"]);",
                            "  tc.test(\"Patient Score 3 matches expected\", getParamValue(\"Patient Score 3\") === expected[\"Patient Score 3\"]);",
                            "",
                            "",
                            "  tc.test(\"All critical values match expected\", criticalTests.every(test => test === true));"
                        ]
                    }
                ]
            }
        }
    ]
}